val system = ActorSystem("AkkaLocalTest") 
启动一个Actor System，这里会调用object ActorSystem的apply方法，这个方法中，会初始化一些信息：主要是配置信息，以及一些dispatcher等等。
1、首先是一个BootstrapSetup，顾名思义，它是一个启动器设置，也就是System的启动设置，继承自Setup。
    1.设置一些ClassLoader(没有设置时，使用当前线程的ClassLoader)，Config，ExecutionContext(就是一个线程池，ExecutorService)
2、ActorSystemSetup 它是ActorSystem配置设置
3、最终，会调用ActorSystem中的apply(String,ActorSystemSetup)方法，这个方法中会做一些初始化工作
    1.  配置Classloader，这里是获取当前线程的Classloader。
    2.  获取配置信息，ConfigFactory.load(Classloader)，获取所有jar中的reference.conf，以及文件名为application的后缀为.json,.conf,.properties。生成最终的Config
    3.  获取defaultExecutionContext
    4.  new 一个ActorSystemImpl，并调用 start方法，在这个方法中，会调用provider.init方法等。
4、ActorSystemImpl的初始化。
    1.   初始化一个Setting变量，而在Setting中，初始化的信息有：
        1、获取Akka的版本号
        2、获取一个ProviderClass，这个主要是要ActorSystem知道使用的是什么provider，有local、remote、cluster、fqcn
        3、获取监控策略类
        4、actor 创建超时时间
        5、是否允许使用Java序列化
        6、日志级别
        7、获取调度类SchedulerClass。默认使用的是akka.actor.LightArrayRevolverScheduler
        以上就是Setting的主要配置信息。
    2.  创建一个MonitorableThreadFactory的threadFactory，主要是用来创建worker的。
        1、就是创建一个ForkJoinWorkerThread的Thread。
    3.  初始化DynamicAccess类，new了一个ReflectiveDynamicAccess。
        1、可以理解为它是一个反射类的方法汇总。
        2、它里面的返回值是一个Try对象，有Success、Failure子类。
    4.  初始化EventStream变量
        1、注册Logger到EventStream，这个Stream其实就是LoggingBus或者就是EventBus。
        2、使用Pub/Sub来进行消息通知的。
    5.  创建LoggingFilter，这个根据字面意思，是日志的过滤器
        1、判断是否满足日志输出级别
    6.  markerLogging变量，是一个LoggingAdapter，是一个记录日志的方法，比如log.info等等
    7.  scheduler调度器变量，是一个Scheduler。
        1、这个也就是setting中的LightArrayRevolverScheduler。
        2、跟netty的HashedWheelTimer差不多，就是定时调度任务。
    8.  provider变量，是一个ActorRefProvider，根据setting中的ProviderClass来的，
        1、如果是local，则是LocalActorRefProvider，这个类的主要功能是：
            1.获取rootpath
            2.创建logger对象
            3.创建deadLetters InternalActorRef
            4.生成temp临时路径以及计数
            5.theOneWhoWalksTheBubblesOfSpaceTime，它的注释说：它是监控层次的顶级锚点，只会接收监控、孩子终止的系统消息或者失败消息
            6.guardianStrategy，守护监控策略配置器，用到user下
            7.lazy defaultDispatcher，默认的dispatcher，生成Dispatcher，在生成Dispatcher过程中，需要生成ExecutorServiceFactoryProvider
                1、如果在初始化ActorSystem时，没有传递defaultExecutionContext，则默认使用配置中的default-executor.fallback。
            8.lazy defaultMailbox，默认邮箱配置类型MailboxType，UnboundedMailbox，也就是ConcurrentLinkedQueue
            9.lazy rootGuardian，根守卫，也就是一个LocalActorRef，其中初始化是：
                1、actorCell，也即actor的执行单元。创建一个ActorCell
                    1.这里面大多数多少var类型的变量，它是一个执行发送，解析动作
                2、调用actorCell的init方法，进行初始化(其实是Dispatch的init，它是一个trait)。
                    1.根据MailboxType创建一个MailBox，
                        1、MailBox，其实是一个Runnable，ForkJoinTask，我的理解：之所以会继承这两个，是因为可能不使用forkjoinpool或者使用。
                        2、最主要的就是run方法，以及更改队列状态，判断是否有消息，以及throughput的处理，还有throughput-deadline-time的处理。
                        3、先处理所有的系统消息，然后再处理所有的邮箱消息。
                    2.创建一个createMessage，这个主要是Create(None)消息体。
                    3.swapMailbox,把新建的mailbox赋值给Dispatch的mailbox，使用的是CAS(Compare and swap)机制。
                    4.把创建的actorCell设置给mailBox的ActorCell。调用  mailbox.setActor
                    5.调用mailBox.systemEnqueue方法，把创建消息发送给自己，参数是self(这个是rootGuardian的LocalActorRef), createMessage。
                        1、在这个方法中，只是把createMessage放到了最新的消息头部。
                    6.判断是否需要发送给上层监控，这里传递的是true，所以需要发送。这里，也就是调用theOneWhoWalksTheBubblesOfSpaceTime的sendSystemMessage，看它的代码，它什么也没有做。
                    7.actorCell的初始化完成。
                3、以上就是LocalActorRef的初始化。
                4、在Start方法中，会调用actorCell.start的方法，然后调用dispatcher.attach方法，
                    1.注册Actor，也就是计数加1
                    2.执行registerForExecution，也就是使用线程池执行MailBox中的run。
                        1、在run中，先执行系统消息，在actorCell初始化时，先放了一个Create(None)系统消息，所以它先消费这个消息
                        2、在处理系统消息时，主要是调用actorCell的systemInvoke,在这个方法中，就是真正的创建Actor实体，也即根据props.newActor创建。并把创建的actor的receive偏函数添加到behaviorStack中，这也就可以实现了become和unbecome了。
                        3、指定ActorCell的actor为刚创建的instance。
                        4、调用instance的aroundPreStart方法，也即Actor的preStart。
                        5、如果akka.actor.debug.lifecycle是true，则广播此消息。
                5、至此，这个rootGuardian已经完全的初始化完成。
            10、lazy guardian 是一个LocalActorRef的方法,这是一个user守护。
                1、获取rootGuardian的actorCell，然后把user作为它的孩子
                2、new 一个LocalActorRef，如果在ActorSystem初始化时，没有配置guardianProps，则使用Guardian      
                3、LocalActorRef的初始化参考4-8-9条。
                    1.与上面初始化不一样的是，它的父亲是rootGuardian。
                4、调用第一步中获取的actorCell的initChild，也就是初始化一些状态
                5、调用LocalActorRef的Start方法。这时候的初始化过程就跟4-8-1-9-4是一样的了。
                6、它创建的是一个Guardian  Actor
            11、systemGuardian，它也是一个LocalActorRef，它是一个system的守护，父节点同样是rootGuardian，跟guardian初始化是一样的，它是一个SystemGuardian。
        2、如果是remote，则是RemoteActorRefProvider
            1.声明一个LocalActorRefProvider，保证本地的actor系统可用。
            2.使用local，获取系统、根、用户守护等。
            3.调用local的init方法，就是本地ActorRefProvider的初始化过程。
            4.保存system到本地ThreadLocal
            5.创建一个remotingTerminator，远程终止器，它是一个状态机，FSM。传递一个systemGuardian作为参数。
            6.创建一个internals，Internals。参数有：RemoteSystemDaemon
                1、Internals是一个case class。
                2、RemoteSystemDaemon初始化的一些信息：
                    1.它是一个actorref，且，它VirtualPathContainer
                    2.订阅AddressTerminatedTopic
                3、注册extraName到local的extraNames
                4、初始化SerializationExtension
                5、初始化transport,也即Remoting类。
                    1.初始化transportSupervisor，这个是非常关键的一个变量，它是一个ActorRef(TransportSupervisor)，名字是：transports，是系统级别的，所以它的路径是：/system/transports
                    2.定义一个EventPublisher，就是发布Remoting的消息。
            7.给remotingTerminator发送internals。
                1、内部处理消息，往systemGuardian发送注册RegisterTerminationHook的消息，在系统的处理类SystemGuardian中，context会监控这个remotingTerminator，并把它加入到Set中。
            8.调用Remoting的start方法。
                1、主要是初始化endpointManager的过程，它是一个ActorRef。
                2、创建一个addressesPromise的Promise。
                3、向manager发送Listen消息，传递一个addressesPromise
                    1.接收到Listen消息后，调用listens处理这个消息。
                        1、动态生成一个Transport，配置文件中默认的配置是NettyTransport。
                        2、wrappedTransport，封装Transport，因为默认没有配置，所以还是NettyTransport。
                        3、生成一个AkkaProtocolTransport
                        4、调用AkkaProtocolTransport的listen，也即它的父类AbstractTransportAdapter的方法，
                            1.在listen方法中，它的返回值是Future[(Address, Promise[AssociationEventListener])]，
                            2.声明一个upstreamListenerPromise的Promise，然后调用NettyTransport的listen方法。
                                1、生成一个InetSocketAddress，如果bind-port没有配置，则使用port，默认是2552
                                2、生成一个Netty的ServerBootstrap启动器，并做bind操作。
                                3、设置readable为false。
                                4、设置associationListenerPromise，当这个promise完成后，设置channel的readable为true。
                                5、返回一个address与associationListenerPromise组成的元组。
                            3.拿到返回的Promise(associationListenerPromise)，设置tryCompleteWith，调用interceptListen方法，这个方法在ActorTransportAdapter中实现
                                1、interceptListen方法的返回值是：Future[AssociationEventListener]，返回是一个事件的监听，它的参数是upstreamListenerPromise，就是在4-8-2-8-3-1-4-2中创建的。
                                2、向manager注册，生成一个ActorRef
                                    1.向/system/transports发送一个注册消息RegisterTransportActor，而这个transports就是4-8-2-6-5-1中创建的TransportSupervisor。
                                        1、这个发送是调用的？ 也即 ask，需要接收者返回一个值给发送者。？方法返回一个Future。
                                        2、参数是：managerProps，这个方法的实现是在AkkaProtocolTransport中实现的。
                                        3、主要是用transports的context创建一个actor，而这个Actor是AkkaProtocolManager。
                                        4、创建完成后，再把创建的ActorRef返回给发送者。发送者使用Future接收。
                                    2.设置manager为返回值的ActorRef，这个ref的真实Actor就是AkkaProtocolManager。
                                    3.向AkkaProtocolManager发送ListenUnderlying，并把upstreamListenerPromise一并传递过去。
                                        1、manager把ready变成receive
                                        2、并指定upstreamListenerPromise携带的值赋值给associationListener(最终会是：EndpointManager)
                                    4.返回一个ActorAssociationEventListener参数是AkkaProtocolManager的ActorRef。
                                3、associationListenerPromise中就会被赋值为：ActorAssociationEventListener(AkkaProtocolManager)
                            4.当interceptListen中的manager创建完成后，Future也就完成了，这时候就会执行tryCompleteWith。也即associationListenerPromise执行完成。
                                1.就会自动自行4-8-2-8-3-1-4-4，也即设置readable为true。
                        5、返回一个address与upstreamListenerPromise的元组。
                    2.Listen处理完成后，构建一个ListensResult，再发送给自己
                    3.处理ListensResult，设置upstreamListenerPromise的success为一个ActorAssociationEventListener(self)，这个self就是EndpointManager的ActorRef，这时候这个Promise已经完成。
                        1、完成Promise后，会执行在它上注册的方法：AkkaProtocolManager中的associationListener会被赋值：ActorAssociationEventListener(self)，参考：4-8-2-8-3-1-4-3-2-3-2
                    4.设置addressesPromise的成功消息。
                4、等待addressesPromise的success完成，向manager发送StartupFinished消息
                    1.接收到StartupFinished消息后，，处理
                        1、把endpointManager的receive变成accepting偏函数
                5、通知RemotingListenEvent消息
            9.创建远程监控。RemoteWatcher
            10.创建RemoteDeploymentWatcher监控。
            以上，初始化完成。
            11.当有客户端接入时，执行的操作是：
                1、调用channelConnected进一步调用TcpServerHandler的onConnect方法，再调用initInbound方法，这个方法在ServerHandler中。
                    1.执行associationListenerFuture.foreach方法，而这个future正是NettyTransport中的associationListenerPromise。
                        1、调用init方法，这是一个柯里化函数，接收两个参数，主要是第二个参数：listener notify InboundAssociation(_)，通知associationListenerPromise持有的Listener。
                            1.在init方法中，创建一个TcpAssociationHandle，这个handle中有一个readHandlerPromise的Promise。
                            2.调用readHandlerPromise的foreach方法，执行：registerListener，channel.setReadable(true)等动作。
                                1、其中registerListener，就是设置Channel与Listener的对应关系，当有消息进来时，就会用这个Listener(ProtocolStateActor)消费消息。
                            3.调用listener notify InboundAssociation(_)，其中下划线就是TcpAssociationHandle，也即这个消息被发送到了AkkaProtocolManager
                                1、接收到InboundAssociation消息后，创建一个ProtocolStateActor的inbound ActorRef。在这个Actor被真正创建时，执行的初始化操作是：
                                    1.设置TcpAssociationHandle的readHandlerPromise的success为ActorHandleEventListener(self)，其中self就是ProtocolStateActor的ActorRef。
                                    2.执行：4-8-2-11-1-1-1-1-2。也即注册，设置可读。
                                    3.等待Handshake消息到来。
                    2.当有消息来时，执行TcpServerHandler中的onMessage方法，封装消息成InboundPayload，并通知出去，这里通知的对象是ProtocolStateActor。
                        1、ProtocolStateActor接收到消息时，先对包进行解码，然后判断是否是关联消息
                        2、回包，把本地的HandshakeInfo回给客户端。
                        3、然后把FSM的状态置为Open，并且是AssociatedWaitHandler。
                            1.在创建AssociatedWaitHandler时，会创建一个notifyInboundHandler
                            2.创建一个readHandlerPromise = Promise[HandleEventListener]，等待回执。
                            3.readHandlerPromise.future.map{ HandleListenerRegistered(_) } pipeTo self。
                                1、pipeTo 只有当readHandlerPromise.future完成，才会执行
                            4.向associationListener(EndpointManager)通知InboundAssociation消息，参数是new的一个AkkaProtocolHandle，这个handle中会把readHandlerPromise带过去，还有远程的握手信息。
                            5.当EndpointManager接收到这个消息时，
                                1、创建一个Endpoint，createEndpoint
                                    1.这个也就是创建ReliableDeliverySupervisor，跟下面6-2-2-1-1-1-2的流程一样，唯一不一样的地方是：
                                        1、在创建writer是也就是createWriter即EndpointWriter，进行构建ActorRef的preStart方法中，这个handle是存在的
                                        2、当存在是，还是创建了一个reader即EndpointReader，使用handle的握手信息的UID，对这个reader赋值
                                        3、创建成功后，执行readHandlerPromise.success(ActorHandleEventListener(newReader))，这里也就是EndpointReader
                                            1.这里的readHandlerPromise，也就是ProtocolStateActor中在构建AssociatedWaitHandler时创建的Promise。
                                            2.这时候执行4-8-11-1-2-3-3
                                2、执行endpoints的registerWritableEndpoint。
                            6.当接收到HandleListenerRegistered消息时
                                1、处理在这期间来的消息。也即通知EndpointReader进行处理。
                                2、把FSM的状态更改为ListenerReady。
                        以上，就完成了消息来时的创建工作，就可以进行消费了。
        3、如果是cluster，则是ClusterActorRefProvider
        4、如果是fqcn，则是fqcn，也即其它的provider
        5、
    9.  在Start方法中，调用provider.init方法
        1、在init方法中，调用了rootGuardian.start方法，由于rootGuardian是lazy的，所以这时候开始初始化它。
        2、systemGuardian调用sendSystemMessage，发送一个Watch，监控guardian
        3、rootGuardian调用sendSystemMessage，发送一个Watch，监控systemGuardian
        4、eventStream开始startDefaultLoggers。
    10. ActorSystem初始化完成.
5、调用system.actorOf方法，用来创建一个Actor，然后就可以使用此ref发送消息了。
    1、调用provider.guardian的underlying也即ActorCell的attachChild方法，进行Actor的创建，参数有一个systemService是false。
    2、上面的也即调用的是一个Children的Trait。最终调用makeChild方法。
    3、在这个方法中呢，首先是调用reserveChild，它主要是把actor的name放到一个treeMap中，用来判断是否已经创建过，也即Actor的名字唯一。
    4、最后调用provider的actorOf方法。
        1.先判断是否使用router。这里没有使用router的初始化是：
            1、这里使用的是async=true，所以创建一个RepointableActorRef的类，然后调用它的initialize方法，在此方法中执行的是：
                1.创建一个UnstartedCell，它里面初始化了一个queue是java的LinkList，还有一个SystemQueue
                2.把Cell赋值给underlying，并赋值给lookup
                3.给guardian发送Supervise系统消息
                4.在处理这个消息使，由于async是true，所以还会调用此RepointableActorRef的point方法
                    1、在point方法中，创建一个真正的ActorCell，并调用init方法，参数：sendSupervise = false，ActorCell的初始化参考4-8-9-2。
                    2、替换lookup为此cell。
                    3、调用cell的start方法，跟4-8-1-9-4是一样的了
                    4、把原来UnStartCell中的消息给ActorCell转发过去。
                    5、并把ActorCell指定到underlying。
                5.这时候RepointableActorRef创建完成。
    5、调用initChild方法，把上面的reserveChild添加的方法替换成持有actorRef的ChildRestartStats，名字还是不变，这里就可以通过名字查到对应的ref了。然后就可以发送消息。
    6、调用ActorRef的Start方法。
    7、发送消息：
        1.调用!发送消息，最终调用的是ActorCell的sendMessage方法，也就是Dispatch的实现方法，并把消息作了封装Envelope。
        2.调用dispatcher消息调度器的dispatch方法，进行消息的派发。
        3.邮箱的消息入队操作。
        4.执行executorService execute mbox,也就三线程池提交任务的过程。
            1、在mailbox的run方法中，直接进行了消费，这个对throughput有处理，也就是，当前处理这个邮箱的线程，是否要处理配置这么多的消息后，才释放此线程。
            2、调用actor的invoke方法，也即ActorCell的invoke方法
            3、最终，执行Actor的aroundReceive，也即咱们实现的Actor Trait中的override def receive: Receive
        5、消息发送完成。
6、如果是发送远程消息，则需要使用actorSelection
    1.创建一个ActorSelection对象
        1、如果Actor不在本机上，则创建一个RemoteActorRef对象，否则，把rootGuardian返回去。
        2、这里着重说一下RemoteActorRef的发送过程
    2.调用ActorSelection的!方法。
        1、在方法中，调用ActorSelection的deliverSelection，并封装消息成ActorSelectionMessage
        2、调用RemoteActorRef的tell方法。
            1.在tell方法中，调用remote的send方法，而这个remote是Remoting类
                1、在Remoting的send方法中，封装消息成Send类，然后调用endpointManager的tell方法。
                    1.在EndpointManager处理Send消息时，
                        1、首先判断，这个addressToWritable是否已经创建过，如果没有，则创建，这里是第一次调用，所以先创建
                        2、使用context.actorOf创建一个ReliableDeliverySupervisor的Endpoint，也即一个ActorRef。
                            1.在ReliableDeliverySupervisor的初始化时，会调用createWriter，创建一个EndpointWriter的ActorRef。
                                1、在EndpointWriter的preStart方法中，会判断handler也即AkkaProtocolHandle是否已经创建，如果没有则进行AkkaProtocolHandle的创建工作
                                    1.调用AkkaProtocolTransport的associate方法，而这个方法中，则向manager(4-8-2-8-5-1中创建)发送一个AssociateUnderlyingRefuseUid的消息，然后等待manager的处理结果。
                                    2.在AkkaProtocolManager接收到消息后，做的处理是：
                                        1、创建ProtocolStateActor，它是一个FSM，它的编解码是AkkaPduProtobufCodec。
                                            1.初始化时，做OutboundUnassociated流程处理，调用NettyTransport的associate方法，进行远程连接。
                                            2.然后把这个操作pipeTo到自己，封装成Handler(_)消息处理，
                                            3.以Closed，OutboundUnassociated作为这个状态机的处理。
                                            4.等待Netty Client连接成功后，返回一个Future[AssociationHandle]，这时候，需要when(Closed)方法处理消息。
                                                1、向remote发送握手消息，假设发送成功，则做failureDetector的heartbeat，初始化定时操作，等待WaitHandshake处理流程，需要等待远程回包、
                                                2、假设接收到成功回包，则更改状态机为Open状态，并返回AkkaProtocolHandle到AkkaProtocolManager。
                                    3.在接收到成功的Handle消息后，首先向父节点发送一个ReliableDeliverySupervisor.GotUid消息
                                    4.创建一个EndpointReader，用来读取消息
                                    5.更改Receive，是writing或者buffered
                            2.在接收到GotUid后，向自己的父节点发送一个GotUid，resendAll。
                        3、在接收到GotUid后，判断是否是拒绝对象，如果不是，则注册registerWritableEndpointUid，然后处理已经缓存的消息(这个是根据Idle来判断的，具体的逻辑还需要再分析)。
                        4、直接发送消息
        3、消息发送流程完成。
        4、发送的都是ActorSelectionMessage封装成的消息，每次发送时，都会把要发送的对象的path一块传递过去。在对方接收到消息后，会从跟路径查找每个孩子。










